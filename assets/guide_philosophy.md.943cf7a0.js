import{_ as s,c as e,o as a,a as n}from"./app.cfba5851.js";const m=JSON.parse('{"title":"Composable Philosophy \u{1F914}","description":"","frontmatter":{},"headers":[{"level":2,"title":"Functions First","slug":"functions-first"},{"level":2,"title":"Invocation vs Execution","slug":"invocation-vs-execution"},{"level":3,"title":"Invocation","slug":"invocation"},{"level":3,"title":"Execution","slug":"execution"},{"level":2,"title":"Phases of Execution","slug":"phases-of-execution"}],"relativePath":"guide/philosophy.md"}'),o={name:"guide/philosophy.md"},t=n(`<h1 id="composable-philosophy-\u{1F914}" tabindex="-1">Composable Philosophy \u{1F914} <a class="header-anchor" href="#composable-philosophy-\u{1F914}" aria-hidden="true">#</a></h1><p><a href="/serverless-use/">ServerlessUse</a> is based on the composable ecosystem from the popular frontend framework <a href="https://vuejs.org/guide/reusability/composables.html#composables" target="_blank" rel="noopener noreferrer">Vue</a>. A simple concept of letting functions being the foundation for reusability and composition. Though it does not use any Vue it is certainly an extension of the already amazing <a href="https://vueuse.org/ecosystem.html" target="_blank" rel="noopener noreferrer">VueUse Ecosystem</a></p><h2 id="functions-first" tabindex="-1">Functions First <a class="header-anchor" href="#functions-first" aria-hidden="true">#</a></h2><p>Javascript is amazingly powerful when you build into it&#39;s strengths. A lot of frameworks and libraries attempt to reinvent the wheel and push developers into practices that slowly drift into a nonstandard. Developers are then left with obsolete patterns that are harder to share across a team and more difficult for new developers to <a href="https://en.wikipedia.org/wiki/Grok" target="_blank" rel="noopener noreferrer">grok</a>.</p><p>The composable model focuses on functions and there ability to wrap each other easily.</p><h2 id="invocation-vs-execution" tabindex="-1">Invocation vs Execution <a class="header-anchor" href="#invocation-vs-execution" aria-hidden="true">#</a></h2><p><a href="/serverless-use/">ServerlessUse</a> was built to make developing on AWS easier and faster. Removing a lot of boilerplate and providing simply composable functions to access common tasks without forcing developers into a full middleware model.</p><p>One of the primary concepts to understand prior to diving into AWS lambda coding is the difference between an Invocation and an Execution.</p><h3 id="invocation" tabindex="-1">Invocation <a class="header-anchor" href="#invocation" aria-hidden="true">#</a></h3><p>This is the process by which your lambda is first started. This is generally referred to as a <strong>Cold Start</strong>. Though it is not completely 1:1 it maybe best to imagine this as a similar process to the browser loading a SPA for the first time or <a href="https://nodejs.org/" target="_blank" rel="noopener noreferrer">NodeJS</a> running an application. The important concept to take away from this is that variables can be kept in memory for the lifetime of the invocation.</p><p>AWS will try to keep your lambda <strong>warm</strong> when it is being used often. This means that it is easy to accidentally share information across requests. It is also a powerful tool to allow for quick caching of information that can be reused.</p><p>Let&#39;s take a look at an Example</p><div class="language-ts"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">use</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">useEvent</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@serverless-use/apigw</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// This will live for the lifetime of the invocation</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// this means as multiple requests come in this can be shared between them</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> times</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#A6ACCD;">[] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">use</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">event</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">useEvent</span><span style="color:#F07178;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">times</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">requestContext</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">timeEpoch</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">times</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>As requests come in the <code>times</code> array will fill up with the timestamps from executions that happen throughout the lifetime of the lambda invocation.</p><div class="language-json"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">times</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:[</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">1659062050859</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">1659062052117</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">1659062052796</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="execution" tabindex="-1">Execution <a class="header-anchor" href="#execution" aria-hidden="true">#</a></h3><p>An <a href="https://aws.amazon.com/lambda/" target="_blank" rel="noopener noreferrer">AWS lambda</a> is a function that will run on demand as opposed to a dedicated server that is on all the time awaiting requests to come into it. Unlike the invocation which is the process by which the Lambda <strong>spins up</strong> the execution phase focuses on the lifetime of the function itself</p><p>The <a href="/serverless-use/packages/apigw/src/use/">ServerlessUse <code>use</code> helper</a> helps manage the execution of your lambda by automatically tracking its start and end. This means that composables can be sure that memory will not leak out into other request executions.</p><p>As composables are accessible anywhere in your code it can get confusing and concerning making sure you&#39;re referring to the correct query parameters or headers. With <a href="/serverless-use/">ServerlessUse</a> you can be sure that all composables will be reset in between requests.</p><p>This does not mean invocation level shared state will not still work, one can simply declare variables outside of the execution scope to be able to access them across invocations.</p><h2 id="phases-of-execution" tabindex="-1">Phases of Execution <a class="header-anchor" href="#phases-of-execution" aria-hidden="true">#</a></h2><ol><li>Execution scope is created</li><li>Event is registered globally</li><li>Context is registered globally</li><li>Handler is executed <em>(hey, its you! \u{1F44B})</em></li><li>(optional) Auto-Transform is applied to result</li><li>Response composables are applied to the result</li><li>(optional) Result is compressed based on request headers</li><li>Execution scope is disposed</li><li>Result is returned</li></ol>`,22),l=[t];function p(r,i,c,h,y,d){return a(),e("div",null,l)}var f=s(o,[["render",p]]);export{m as __pageData,f as default};
